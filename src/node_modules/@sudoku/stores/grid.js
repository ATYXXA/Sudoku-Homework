import { BOX_SIZE, SUDOKU_SIZE } from '@sudoku/constants';
import { decodeSencode, encodeSudoku } from '@sudoku/sencode';
import { generateSudoku, solveSudoku } from '@sudoku/sudoku';
import { derived, writable, get } from 'svelte/store';
import { hints } from './hints';
import { undoStack, redoStack , canUndo, canRedo } from './history';
import { candidates } from './candidates.js';

function createGrid() {
	const grid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	return {
		subscribe: grid.subscribe,

		generate(difficulty) {
			grid.set(generateSudoku(difficulty));
		},

		decodeSencode(sencode) {
			grid.set(decodeSencode(sencode));
		},

		get(gridStore, x, y) {
			return gridStore[y][x];
		},

		getSencode(gridStore) {
			return encodeSudoku(gridStore);
		},
	};
}

export const grid = createGrid();

// Deep clone function for grid state
function cloneGrid(gridState) {
    return gridState.map(row => [...row]);
}

function createUserGrid() {
	const userGrid = writable([
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
		[0, 0, 0, 0, 0, 0, 0, 0, 0],
	]);

	grid.subscribe($grid => {
		let newGrid = [];

		for (let y = 0; y < SUDOKU_SIZE; y++) {
			newGrid[y] = [];
			for (let x = 0; x < SUDOKU_SIZE; x++) {
				newGrid[y][x] = $grid[y][x];
			}
		}

		userGrid.set(newGrid);
	});

	return {
		subscribe: userGrid.subscribe,

		set(pos, value) {
			const currentState = cloneGrid(get(userGrid));		
			userGrid.update(grid => {
				grid[pos.y][pos.x] = value;
				// Save current state to undo stack before making changes
				undoStack.update(stack => {
					stack.push(currentState);
					return stack;
				});
				// Clear redo stack when new move is made
				redoStack.set([]);

				canUndo.set(get(undoStack).length > 0);
				canRedo.set(get(redoStack).length > 0);
				return grid;
			});
		},

		undo() {
			undoStack.update(stack => {
				if (stack.length === 0) return stack;
				const previousState = stack.pop();

				// Save current state to redo stack
				redoStack.update(redoStack => {
					redoStack.push(cloneGrid(get(userGrid)));
					return redoStack;
				});

				// Restore previous state
				userGrid.set(previousState);

				canUndo.set(stack.length > 0);
				canRedo.set(get(redoStack).length > 0);
				return stack;
			});
		},

		redo() {
			redoStack.update(stack => {
				if (stack.length === 0) return stack;
				const nextState = stack.pop();

				// Save current state to undo stack
				undoStack.update(undoStack => {
					undoStack.push(cloneGrid(get(userGrid)));
					return undoStack;
				});

				// Restore next state
				userGrid.set(nextState);

				canUndo.set(get(undoStack).length > 0);
				canRedo.set(stack.length > 0);
				return stack;
			});
		},

		applyHint: () => {
			hints.useHint();    // Decrement hints
            if(hints.gethints() <= 0){  // 取消提示
                candidates.clear();
                return;
            }
			userGrid.update($userGrid => {           
                console.log("原始棋盘\n",$userGrid);
                // 检查棋盘中所有空着的位置中，每个位置对于数独要求来说只能够填写一个数字的格子
                const uniqueCells = getHintCells($userGrid);
                console.log("uniqueCells:\n", uniqueCells);
                
                // 在棋盘中用绿色背景显示这些格子，并显示这些格子可以填写的数字
                // console.log("candidates: ", candidates);
                candidates.clear();
                uniqueCells.forEach(cell => {
                    // 添加新的候选值到指定格子的候选值数组中
                    // console.log("cell: ", cell);
                    let x = cell.x;
                    let y = cell.y;
                    let value = cell.value;
                    candidates.add({x:x, y:y}, value);  // candidate要反过来
                });
                console.log("candidates: ", candidates);
                return $userGrid;
			});
		},
	};
}

// 获取棋盘中所有空着的位置中，每个位置对于数独要求来说只能够填写一个数字的格子
function getHintCells(grid) {
  const uniqueCells = [];
  for (let x = 0; x < 9; x++) {
    for (let y = 0; y < 9; y++) {
      if (grid[x][y] === 0) {
        const possibleValues = getPossibleValues(grid, x, y);
        if (possibleValues.length <= hints.gethints()) {
            possibleValues.forEach(value => {
              uniqueCells.push({ x, y, value});
            });
        }
      }
    }
  }
//   console.log("num_null_cells: ", num_null_cells); 
  return uniqueCells;
}

// 获取一个格子可以填写的数字
function getPossibleValues(grid, x, y) {
  const possibleValues = [];
  for (let i = 1; i <= 9; i++) {
    if (isValid(grid, x, y, i)) {
      possibleValues.push(i);
    }
  }
  return possibleValues;
}

// 检查一个数字是否可以填写在一个格子中
function isValid(grid, x, y, value) {
  // 检查行和列中是否已经存在这个数字
  for (let i = 0; i < 9; i++) {
    if (grid[x][i] === value || grid[i][y] === value) {
      return false;
    }
  }
  
  // 检查 3x3 的宫格中是否已经存在这个数字
  const startRow = Math.floor(x / 3) * 3;
  const startCol = Math.floor(y / 3) * 3;
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if (grid[startRow + i][startCol + j] === value) {
        return false;
      }
    }
  }
  
  return true;
}

export const userGrid = createUserGrid();

export const invalidCells = derived(userGrid, $userGrid => {
	const _invalidCells = [];

	const addInvalid = (x, y) => {
		const xy = x + ',' + y;
		if (!_invalidCells.includes(xy)) _invalidCells.push(xy);
	};

	for (let y = 0; y < SUDOKU_SIZE; y++) {
		for (let x = 0; x < SUDOKU_SIZE; x++) {

			const value = $userGrid[y][x];

			if (value) {
				for (let i = 0; i < SUDOKU_SIZE; i++) {
					// Check the row
					if (i !== x && $userGrid[y][i] === value) {
						addInvalid(x, y);
					}

					// Check the column
					if (i !== y && $userGrid[i][x] === value) {
						addInvalid(x, i);
					}
				}

				// Check the box
				const startY = Math.floor(y / BOX_SIZE) * BOX_SIZE;
				const endY = startY + BOX_SIZE;
				const startX = Math.floor(x / BOX_SIZE) * BOX_SIZE;
				const endX = startX + BOX_SIZE;
				for (let row = startY; row < endY; row++) {
					for (let col = startX; col < endX; col++) {
						if (row !== y && col !== x && $userGrid[row][col] === value) {
							addInvalid(col, row);
						}
					}
				}
			}

		}
	}

	return _invalidCells;
}, []);