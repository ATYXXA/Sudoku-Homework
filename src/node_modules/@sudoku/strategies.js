class SudokuStrategy {
    solve(sudoku) {
        throw new Error('This method must be overridden by subclasses');
    }
}


class XWingStrategy extends SudokuStrategy {
    solve(sudoku) {
        function isSafe(board, row, col, num) {
            // 检查行
            for (let i = 0; i < 9; i++) {
                if (board[row][i] === num) {
                    return false;
                }
            }
            // 检查列
            for (let i = 0; i < 9; i++) {
                if (board[i][col] === num) {
                    return false;
                }
            }
            // 检查 3x3 宫格
            let startRow = Math.floor(row / 3) * 3;
            let startCol = Math.floor(col / 3) * 3;
            for (let i = 0; i < 3; i++) {
                for (let j = 0; j < 3; j++) {
                    if (board[startRow + i][startCol + j] === num) {
                        return false;
                    }
                }
            }
            return true;
        }

        function findCandidates(board) {
            let candidates = [];
            for (let i = 0; i < 9; i++) {
                candidates.push([]);
                for (let j = 0; j < 9; j++) {
                    if (board[i][j] === 0) {
                        let possible = [];
                        for (let num = 1; num <= 9; num++) {
                            if (isSafe(board, i, j, num)) {
                                possible.push(num);
                            }
                        }
                        candidates[i].push(possible);
                    } else {
                        candidates[i].push([]);
                    }
                }
            }
            return candidates;
        }

        function findXWing(candidates) {
            // 检查行中的 X-Wing
            for (let num = 1; num <= 9; num++) {
                for (let i1 = 0; i1 < 9; i1++) {
                    for (let i2 = i1 + 1; i2 < 9; i2++) {
                        let row1 = [], row2 = [];
                        for (let j = 0; j < 9; j++) {
                            if (candidates[i1][j].includes(num)) {
                                row1.push(j);
                            }
                            if (candidates[i2][j].includes(num)) {
                                row2.push(j);
                            }
                        }
                        if (row1.length === 2 && row2.length === 2 && row1[0]!== row1[1] && row2[0]!== row2[1] && ((row1[0] === row2[0] && row1[1] === row2[1]) || (row1[0] === row2[1] && row1[1] === row2[0]))) {
                            // 找到行中的 X-Wing
                            for (let i = 0; i < 9; i++) {
                                if (i!== i1 && i!== i2) {
                                    for (let j of row1) {
                                        let index = candidates[i][j].indexOf(num);
                                        if (index!== -1) {
                                            candidates[i][j].splice(index, 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            // 检查列中的 X-Wing
            for (let num = 1;  num <= 9; num++) {
                for (let j1 = 0; j1 < 9; j1++) {
                    for (let j2 = j1 + 1; j2 < 9; j2++) {
                        let col1 = [], col2 = [];
                        for (let i = 0; i < 9; i++) {
                            if (candidates[i][j1].includes(num)) {
                                col1.push(i);
                            }
                            if (candidates[i][j2].includes(num)) {
                                col2.push(i);
                            }
                        }
                        if (col1.length === 2 && col2.length === 2 && col1[0]!== col1[1] && col2[0]!== col2[1] && ((col1[0] === col2[0] && col1[1] === col2[1]) || (col1[0] === col2[1] && col1[1] === col2[0]))) {
                            // 找到列中的 X-Wing
                            for (let j = 0; j < 9; j++) {
                                if (j!== j1 && j!== j2) {
                                    for (let i of col1) {
                                        let index = candidates[i][j].indexOf(num);
                                        if (index!== -1) {
                                            candidates[i][j].splice(index, 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return candidates;
        }

        function applyXWing(board) {
            let candidates = findCandidates(board);
            candidates = findXWing(candidates);
            for (let i = 0; i < 9; i++) {
                for (let j = 0; j < 9; j++) {
                    if (candidates[i][j].length === 1) {
                        board[i][j] = candidates[i][j][0];
                    }
                }
            }
            return board;
        }

        let board = JSON.parse(JSON.stringify(sudoku));
        let modified = true;
        while (modified) {
            let prevBoard = JSON.stringify(board);
            board = applyXWing(board);
            modified = prevBoard!== JSON.stringify(board);
        }
        return board;
    }
}


class SudokuStrategyFactory {
    createStrategy(strategyName) {
        switch (strategyName) {
            case 'x-wing':
                return new XWingStrategy();
            // 可以添加更多策略
            default:
                throw new Error(`Strategy ${strategyName} not found`);
        }
    }
}


module.exports = {
    SudokuStrategyFactory,
    XWingStrategy
};